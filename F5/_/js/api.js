// Generated by CoffeeScript 1.6.3
(function() {
  var postAPI,
    _this = this,
    __slice = [].slice;

  if ($.browser.msie) {
    window.console = {
      log: function() {
        var rest;
        rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return null;
      }
    };
  }

  postAPI = function(cmd, params, success_handler, error_handler) {
    var url;
    url = "/_/api/" + cmd;
    return $.post(url, params, function(resp) {
      if (resp.status === 'error') {
        if (error_handler) {
          return error_handler(resp);
        } else {
          return alert(resp.message);
        }
      } else {
        if (success_handler) {
          return success_handler(resp);
        }
      }
    }, 'json').fail(function(resp) {
      return console.log('调用失败', params, resp);
    });
  };

  window.API = {
    project: {
      list: function(sh, eh) {
        return postAPI('project/list', {}, sh, eh);
      },
      add: function(projectPath, sh, eh) {
        return postAPI('project/add', {
          path: projectPath
        }, sh, eh);
      },
      remove: function(projectPath, sh, eh) {
        return postAPI('project/remove', {
          path: projectPath
        }, sh, eh);
      },
      update: function(project, sh, eh) {
        var projectData;
        projectData = project["export"]();
        return postAPI('project/update', {
          project: JSON.stringify(projectData)
        }, sh, eh);
      }
    },
    os: {
      f5Version: function(sh, eh) {
        return postAPI('os/f5Version', {}, sh, eh);
      },
      listDir: function(path, sh, eh) {
        return postAPI('os/listDir', {
          path: path
        }, sh, eh);
      },
      writeFile: function(path, content, sh, eh) {
        return postAPI('os/writeFile', {
          path: path,
          content: content
        }, sh, eh);
      },
      localHosts: function(sh, eh) {
        return postAPI('os/localHosts', {}, sh, eh);
      }
    }
  };

}).call(this);
